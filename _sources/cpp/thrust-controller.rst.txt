.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::MechJeb

ThrustController
================


.. class:: ThrustController



   .. function:: bool differential_throttle()
   .. function:: void set_differential_throttle(bool value)



      :Game Scenes: Flight

   .. function:: DifferentialThrottleStatus differential_throttle_status()



      :Game Scenes: Flight

   .. function:: bool electric_throttle()
   .. function:: void set_electric_throttle(bool value)



      :Game Scenes: Flight

   .. function:: double electric_throttle_hi()
   .. function:: void set_electric_throttle_hi(double value)



      :Game Scenes: Flight

   .. function:: double electric_throttle_lo()
   .. function:: void set_electric_throttle_lo(double value)



      :Game Scenes: Flight

   .. function:: double flameout_safety_pct()
   .. function:: void set_flameout_safety_pct(double value)

      The jet safety margin. A value between 0 and 1.

      :Game Scenes: Flight

   .. function:: bool limit_acceleration()
   .. function:: void set_limit_acceleration(bool value)



      :Game Scenes: Flight

   .. function:: bool limit_dynamic_pressure()
   .. function:: void set_limit_dynamic_pressure(bool value)



      :Game Scenes: Flight

   .. function:: bool limit_throttle()
   .. function:: void set_limit_throttle(bool value)



      :Game Scenes: Flight

   .. function:: bool limit_to_prevent_flameout()
   .. function:: void set_limit_to_prevent_flameout(bool value)



      :Game Scenes: Flight

   .. function:: bool limit_to_prevent_overheats()
   .. function:: void set_limit_to_prevent_overheats(bool value)

      Limits the throttle to prevent parts from overheating.

      :Game Scenes: Flight

   .. function:: bool limiter_min_throttle()
   .. function:: void set_limiter_min_throttle(bool value)



      :Game Scenes: Flight

   .. function:: bool manage_intakes()
   .. function:: void set_manage_intakes(bool value)



      :Game Scenes: Flight

   .. function:: double max_acceleration()
   .. function:: void set_max_acceleration(double value)

      Limit acceleration to [m/s^2] (never exceed the acceleration during ascent).

      :Game Scenes: Flight

   .. function:: double max_dynamic_pressure()
   .. function:: void set_max_dynamic_pressure(double value)

      Limit the maximal dynamic pressure in Pa.
      This avoids that pieces break off during launch because of atmospheric pressure.

      :Game Scenes: Flight

   .. function:: double max_throttle()
   .. function:: void set_max_throttle(double value)

      Never exceed the percentage of the throttle during ascent (value between 0 and 1).

      :Game Scenes: Flight

   .. function:: double min_throttle()
   .. function:: void set_min_throttle(double value)

      Never go below the percentage of the throttle during ascent (value between 0 and 1).

      :Game Scenes: Flight

   .. function:: bool smooth_throttle()
   .. function:: void set_smooth_throttle(bool value)



      :Game Scenes: Flight

   .. function:: double throttle_smoothing_time()
   .. function:: void set_throttle_smoothing_time(double value)



      :Game Scenes: Flight



.. namespace:: krpc::services::MechJeb
.. enum-struct:: DifferentialThrottleStatus




   .. enumerator:: all_engines_off




   .. enumerator:: more_engines_required




   .. enumerator:: solver_failed




   .. enumerator:: success
