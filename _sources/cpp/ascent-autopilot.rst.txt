.. default-domain:: cpp
.. highlight:: cpp
.. namespace:: krpc::services::MechJeb

AscentAutopilot
===============


.. class:: AscentAutopilot

   This module controls the Ascent Guidance in MechJeb 2.

   .. note::

      See `MechJeb2 wiki <https://github.com/MuMech/MechJeb2/wiki/Ascent-Guidance#initial-pitch-over-issues>`_ for more guidance on how to optimally set up this autopilot.

   .. function:: bool enabled()
   .. function:: void set_enabled(bool value)



      :Game Scenes: Flight

   .. function:: std::string status()

      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. function:: int32_t ascent_path_index()
   .. function:: void set_ascent_path_index(int32_t value)

      The selected ascent path.

      0 = :class:`AscentClassic` (Classic Ascent Profile)

      1 = :class:`AscentGT` (Stock-style GravityTurn)

      2 = :class:`AscentPVG` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. function:: AscentClassic ascent_path_classic()

      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. function:: AscentGT ascent_path_gt()

      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. function:: AscentPVG ascent_path_pvg()

      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. function:: double desired_inclination()
   .. function:: void set_desired_inclination(double value)

      The desired inclination in degrees for the final circular orbit.

      :Game Scenes: Flight

   .. function:: double desired_orbit_altitude()
   .. function:: void set_desired_orbit_altitude(double value)

      The desired altitude in kilometres for the final circular orbit.

      :Game Scenes: Flight

   .. function:: ThrustController thrust_controller()



      :Game Scenes: Flight


      .. note::

         Equivalent to :func:`thrust_controller`.

   .. function:: bool force_roll()
   .. function:: void set_force_roll(bool value)

      The state of force roll.

      :Game Scenes: Flight

   .. function:: double turn_roll()
   .. function:: void set_turn_roll(double value)

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. function:: double vertical_roll()
   .. function:: void set_vertical_roll(double value)

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. function:: bool limit_ao_a()
   .. function:: void set_limit_ao_a(bool value)

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. function:: double max_ao_a()
   .. function:: void set_max_ao_a(double value)

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. function:: double ao_a_limit_fadeout_pressure()
   .. function:: void set_ao_a_limit_fadeout_pressure(double value)

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. function:: bool corrective_steering()
   .. function:: void set_corrective_steering(bool value)

      Will cause the craft to steer based on the more accurate velocity vector rather than positional vector (large craft may actually perform better with this box unchecked).

      :Game Scenes: Flight

   .. function:: double corrective_steering_gain()
   .. function:: void set_corrective_steering_gain(double value)

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. function:: bool autostage()
   .. function:: void set_autostage(bool value)

      The autopilot will automatically stage when the current stage has run out of fuel.
      Paramethers can be set in :class:`StagingController`.

      :Game Scenes: Flight

   .. function:: StagingController staging_controller()



      :Game Scenes: Flight


      .. note::

         Equivalent to :func:`staging_controller`.

   .. function:: bool autodeploy_solar_panels()
   .. function:: void set_autodeploy_solar_panels(bool value)

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. function:: bool auto_deploy_antennas()
   .. function:: void set_auto_deploy_antennas(bool value)

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. function:: bool skip_circularization()
   .. function:: void set_skip_circularization(bool value)

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. function:: int32_t warp_count_down()
   .. function:: void set_warp_count_down(int32_t value)



      :Game Scenes: Flight

   .. function:: double launch_lan_difference()
   .. function:: void set_launch_lan_difference(double value)



      :Game Scenes: Flight

   .. function:: double launch_phase_angle()
   .. function:: void set_launch_phase_angle(double value)



      :Game Scenes: Flight

   .. function:: void launch_to_rendezvous()




      :Game Scenes: Flight

   .. function:: void launch_to_target_plane()

      Launch into the plane of the selected target.


      :Game Scenes: Flight



AscentClassic
-------------


.. class:: AscentClassic

   The Classic Ascent Profile.

   .. function:: bool auto_path()
   .. function:: void set_auto_path(bool value)

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. function:: float auto_path_perc()
   .. function:: void set_auto_path_perc(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. function:: float auto_path_speed_factor()
   .. function:: void set_auto_path_speed_factor(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. function:: double auto_turn_start_altitude()



      :Game Scenes: Flight

   .. function:: double auto_turn_start_velocity()



      :Game Scenes: Flight

   .. function:: double auto_turn_end_altitude()



      :Game Scenes: Flight

   .. function:: double turn_start_altitude()
   .. function:: void set_turn_start_altitude(double value)

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. function:: double turn_start_velocity()
   .. function:: void set_turn_start_velocity(double value)

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. function:: double turn_end_altitude()
   .. function:: void set_turn_end_altitude(double value)

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. function:: double turn_end_angle()
   .. function:: void set_turn_end_angle(double value)

      The final flight path angle.

      :Game Scenes: Flight

   .. function:: double turn_shape_exponent()
   .. function:: void set_turn_shape_exponent(double value)

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. class:: AscentGT

   This profile is similar to the gravity turn mod. It is a 3-burn to orbit style of launch that can get to orbit with about 2800 dV on stock Kerbin.
   If you want to have fun make a rocket that is basically a nose cone, a jumbo-64 a mainsail and some fairly big fins, have the pitch program flip it over aggressively (uncheck the AoA limiter, set the values to like 0.5 / 50 / 40 / 45 / 1) and let it rip.

   .. note::

      It's not precisely the GT mod algorithm and it does not do any pitch-up during the intermediate burn right now, so it won't handle low TWR upper stages.

   .. function:: double hold_ap_time()
   .. function:: void set_hold_ap_time(double value)

      At the intermediate altitude with this much time-to-apoapsis left the engine will start burning prograde to lift the apoapsis.
      The engine will throttle down in order to burn closer to the apoapsis.
      This is very similar to the lead-time of a maneuver node in concept, but with throttling down in the case where the player has initiated the burn too early (the corollary is that if you see lots of throttling down at the start, you likely need less HoldAP time).

      :Game Scenes: Flight

   .. function:: double intermediate_altitude()
   .. function:: void set_intermediate_altitude(double value)

      Intermediate apoapsis altitude to coast to and then raise the apoapsis up to the eventual final target. May be set to equal the final target in order to skip the intermediate phase.

      :Game Scenes: Flight

   .. function:: double turn_start_altitude()
   .. function:: void set_turn_start_altitude(double value)

      Altitude in km to pitch over and initiate the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight

   .. function:: double turn_start_pitch()
   .. function:: void set_turn_start_pitch(double value)

      Pitch that the pitch program immediately applies.

      :Game Scenes: Flight

   .. function:: double turn_start_velocity()
   .. function:: void set_turn_start_velocity(double value)

      Velocity in m/s which triggers pitch over and initiates the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight



AscentPVG
---------


.. class:: AscentPVG

   The Primer Vector Guidance (RSS/RO) profile.

   .. function:: double desired_apoapsis()
   .. function:: void set_desired_apoapsis(double value)

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. function:: double pitch_start_velocity()
   .. function:: void set_pitch_start_velocity(double value)



      :Game Scenes: Flight

   .. function:: double pitch_rate()
   .. function:: void set_pitch_rate(double value)



      :Game Scenes: Flight

   .. function:: bool omit_coast()
   .. function:: void set_omit_coast(bool value)



      :Game Scenes: Flight
