.. default-domain:: c
.. highlight:: c


AscentAutopilot
===============


.. type:: krpc_MechJeb_AscentAutopilot_t

   This module controls the Ascent Guidance in MechJeb 2.

   .. note::

      See `MechJeb2 wiki <https://github.com/MuMech/MechJeb2/wiki/Ascent-Guidance#initial-pitch-over-issues>`_ for more guidance on how to optimally set up this autopilot.

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_Enabled(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_Enabled(bool value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_Status(krpc_connection_t connection, char * * result)

      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AscentPathIndex(krpc_connection_t connection, int32_t * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_AscentPathIndex(int32_t value)

      The selected ascent path.

      0 = :type:`krpc_MechJeb_AscentClassic_t` (Classic Ascent Profile)

      1 = :type:`krpc_MechJeb_AscentGT_t` (Stock-style GravityTurn)

      2 = :type:`krpc_MechJeb_AscentPVG_t` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AscentPathClassic(krpc_connection_t connection, krpc_MechJeb_AscentClassic_t * result)

      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AscentPathGT(krpc_connection_t connection, krpc_MechJeb_AscentGT_t * result)

      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AscentPathPVG(krpc_connection_t connection, krpc_MechJeb_AscentPVG_t * result)

      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_DesiredInclination(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_DesiredInclination(double value)

      The desired inclination in degrees for the final circular orbit.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_DesiredOrbitAltitude(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_DesiredOrbitAltitude(double value)

      The desired altitude in kilometres for the final circular orbit.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_ThrustController(krpc_connection_t connection, krpc_MechJeb_ThrustController_t * result)



      :Game Scenes: Flight


      .. note::

         Equivalent to :func:`krpc_MechJeb_ThrustController`.

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_ForceRoll(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_ForceRoll(bool value)

      The state of force roll.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_TurnRoll(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_TurnRoll(double value)

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_VerticalRoll(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_VerticalRoll(double value)

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LimitAoA(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_LimitAoA(bool value)

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_MaxAoA(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_MaxAoA(double value)

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AoALimitFadeoutPressure(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_AoALimitFadeoutPressure(double value)

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_CorrectiveSteering(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_CorrectiveSteering(bool value)

      Will cause the craft to steer based on the more accurate velocity vector rather than positional vector (large craft may actually perform better with this box unchecked).

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_CorrectiveSteeringGain(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_CorrectiveSteeringGain(double value)

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_Autostage(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_Autostage(bool value)

      The autopilot will automatically stage when the current stage has run out of fuel.
      Paramethers can be set in :type:`krpc_MechJeb_StagingController_t`.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_StagingController(krpc_connection_t connection, krpc_MechJeb_StagingController_t * result)



      :Game Scenes: Flight


      .. note::

         Equivalent to :func:`krpc_MechJeb_StagingController`.

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AutodeploySolarPanels(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_AutodeploySolarPanels(bool value)

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AutoDeployAntennas(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_AutoDeployAntennas(bool value)

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_SkipCircularization(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_SkipCircularization(bool value)

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_WarpCountDown(krpc_connection_t connection, int32_t * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_WarpCountDown(int32_t value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LaunchLANDifference(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_LaunchLANDifference(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LaunchPhaseAngle(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentAutopilot_set_LaunchPhaseAngle(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LaunchMode(krpc_connection_t connection, krpc_MechJeb_AscentLaunchMode_t * result)

      Current autopilot mode. Useful for determining whether the autopilot is performing a timed launch or not.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_AbortTimedLaunch(krpc_connection_t connection)

      Abort a known timed launch when it has not started yet


      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LaunchToRendezvous(krpc_connection_t connection)

      Launch to rendezvous with the selected target.


      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentAutopilot_LaunchToTargetPlane(krpc_connection_t connection)

      Launch into the plane of the selected target.


      :Game Scenes: Flight



.. type:: krpc_MechJeb_AscentLaunchMode_t




   .. macro:: KRPC_MECHJEB_ASCENTLAUNCHMODE_NORMAL

      The autopilot is not performing a timed launch.


   .. macro:: KRPC_MECHJEB_ASCENTLAUNCHMODE_RENDEZVOUS

      The autopilot is performing a timed launch to rendezvous with the target vessel.


   .. macro:: KRPC_MECHJEB_ASCENTLAUNCHMODE_TARGETPLANE

      The autopilot is performing a timed launch to target plane.


   .. macro:: KRPC_MECHJEB_ASCENTLAUNCHMODE_UNKNOWN

      The autopilot is performing an unknown timed launch.



AscentClassic
-------------


.. type:: krpc_MechJeb_AscentClassic_t

   The Classic Ascent Profile.

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoPath(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_AutoPath(bool value)

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoTurnPercent(krpc_connection_t connection, float * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_AutoTurnPercent(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoTurnSpeedFactor(krpc_connection_t connection, float * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_AutoTurnSpeedFactor(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoTurnStartAltitude(krpc_connection_t connection, double * result)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoTurnStartVelocity(krpc_connection_t connection, double * result)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_AutoTurnEndAltitude(krpc_connection_t connection, double * result)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_TurnStartAltitude(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_TurnStartAltitude(double value)

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_TurnStartVelocity(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_TurnStartVelocity(double value)

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_TurnEndAltitude(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_TurnEndAltitude(double value)

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_TurnEndAngle(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_TurnEndAngle(double value)

      The final flight path angle.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentClassic_TurnShapeExponent(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentClassic_set_TurnShapeExponent(double value)

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. type:: krpc_MechJeb_AscentGT_t

   This profile is similar to the gravity turn mod. It is a 3-burn to orbit style of launch that can get to orbit with about 2800 dV on stock Kerbin.
   If you want to have fun make a rocket that is basically a nose cone, a jumbo-64 a mainsail and some fairly big fins, have the pitch program flip it over aggressively (uncheck the AoA limiter, set the values to like 0.5 / 50 / 40 / 45 / 1) and let it rip.

   .. note::

      It's not precisely the GT mod algorithm and it does not do any pitch-up during the intermediate burn right now, so it won't handle low TWR upper stages.

   .. function:: krpc_error_t krpc_MechJeb_AscentGT_HoldAPTime(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentGT_set_HoldAPTime(double value)

      At the intermediate altitude with this much time-to-apoapsis left the engine will start burning prograde to lift the apoapsis.
      The engine will throttle down in order to burn closer to the apoapsis.
      This is very similar to the lead-time of a maneuver node in concept, but with throttling down in the case where the player has initiated the burn too early (the corollary is that if you see lots of throttling down at the start, you likely need less HoldAP time).

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentGT_IntermediateAltitude(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentGT_set_IntermediateAltitude(double value)

      Intermediate apoapsis altitude to coast to and then raise the apoapsis up to the eventual final target. May be set to equal the final target in order to skip the intermediate phase.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentGT_TurnStartAltitude(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentGT_set_TurnStartAltitude(double value)

      Altitude in km to pitch over and initiate the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentGT_TurnStartPitch(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentGT_set_TurnStartPitch(double value)

      Pitch that the pitch program immediately applies.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentGT_TurnStartVelocity(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentGT_set_TurnStartVelocity(double value)

      Velocity in m/s which triggers pitch over and initiates the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight



AscentPVG
---------


.. type:: krpc_MechJeb_AscentPVG_t

   The Primer Vector Guidance (RSS/RO) profile.

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_AttachAltFlag(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_AttachAltFlag(bool value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_DesiredApoapsis(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_DesiredApoapsis(double value)

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_DesiredAttachAlt(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_DesiredAttachAlt(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_DynamicPressureTrigger(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_DynamicPressureTrigger(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_FixedCoast(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_FixedCoast(bool value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_FixedCoastLength(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_FixedCoastLength(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_PitchRate(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_PitchRate(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_PitchStartVelocity(krpc_connection_t connection, double * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_PitchStartVelocity(double value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_StagingTrigger(krpc_connection_t connection, int32_t * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_StagingTrigger(int32_t value)



      :Game Scenes: Flight

   .. function:: krpc_error_t krpc_MechJeb_AscentPVG_StagingTriggerFlag(krpc_connection_t connection, bool * result)
   .. function:: void krpc_MechJeb_AscentPVG_set_StagingTriggerFlag(bool value)



      :Game Scenes: Flight
