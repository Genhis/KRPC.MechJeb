.. default-domain:: java
.. highlight:: java
.. package:: krpc.client.services.MechJeb

AscentAutopilot
===============


.. type:: public class AscentAutopilot

   This module controls the Ascent Guidance in MechJeb 2.

   .. method:: boolean getEnabled()

   .. method:: void setEnabled(boolean value)



      :Game Scenes: Flight

   .. method:: String getStatus()


      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. method:: int getAscentPathIndex()

   .. method:: void setAscentPathIndex(int value)

      The selected ascent path.

      0 = :type:`AscentClassic` (Classic Ascent Profile)

      1 = :type:`AscentGT` (Stock-style GravityTurn)

      2 = :type:`AscentPVG` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. method:: AscentClassic getAscentPathClassic()


      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. method:: AscentGT getAscentPathGT()


      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. method:: AscentPVG getAscentPathPVG()


      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. method:: double getDesiredInclination()

   .. method:: void setDesiredInclination(double value)

      The desired inclination.

      :Game Scenes: Flight

   .. method:: double getDesiredOrbitAltitude()

   .. method:: void setDesiredOrbitAltitude(double value)

      The desired orbit altitude.

      :Game Scenes: Flight

   .. method:: ThrustController getThrustController()




      :Game Scenes: Flight


      .. note::

         Equivalend to :meth:`getThrustController()`.

   .. method:: boolean getForceRoll()

   .. method:: void setForceRoll(boolean value)

      The state of force roll.

      :Game Scenes: Flight

   .. method:: double getTurnRoll()

   .. method:: void setTurnRoll(double value)

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. method:: double getVerticalRoll()

   .. method:: void setVerticalRoll(double value)

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. method:: boolean getLimitAoA()

   .. method:: void setLimitAoA(boolean value)

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. method:: double getMaxAoA()

   .. method:: void setMaxAoA(double value)

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. method:: double getAoALimitFadeoutPressure()

   .. method:: void setAoALimitFadeoutPressure(double value)

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. method:: boolean getCorrectiveSteering()

   .. method:: void setCorrectiveSteering(boolean value)

      The state of corrective steering.

      :Game Scenes: Flight

   .. method:: double getCorrectiveSteeringGain()

   .. method:: void setCorrectiveSteeringGain(double value)

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. method:: boolean getAutostage()

   .. method:: void setAutostage(boolean value)

      Whether to enable autostaging. Paramethers can be set in :type:`StagingController`.

      :Game Scenes: Flight

   .. method:: StagingController getStagingController()




      :Game Scenes: Flight


      .. note::

         Equivalent to :meth:`getStagingController()`.

   .. method:: boolean getAutodeploySolarPanels()

   .. method:: void setAutodeploySolarPanels(boolean value)

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. method:: boolean getAutoDeployAntennas()

   .. method:: void setAutoDeployAntennas(boolean value)

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. method:: boolean getSkipCircularization()

   .. method:: void setSkipCircularization(boolean value)

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. method:: int getWarpCountDown()

   .. method:: void setWarpCountDown(int value)



      :Game Scenes: Flight

   .. method:: double getLaunchLANDifference()

   .. method:: void setLaunchLANDifference(double value)



      :Game Scenes: Flight

   .. method:: double getLaunchPhaseAngle()

   .. method:: void setLaunchPhaseAngle(double value)



      :Game Scenes: Flight

   .. method:: void launchToRendezvous()



      :Game Scenes: Flight

   .. method:: void launchToTargetPlane()

      Launch into the plane of the selected target.

      :Game Scenes: Flight



AscentClassic
-------------


.. type:: public class AscentClassic

   The Classic Ascent Profile.

   .. method:: boolean getAutoPath()

   .. method:: void setAutoPath(boolean value)

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. method:: float getAutoPathPerc()

   .. method:: void setAutoPathPerc(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. method:: float getAutoPathSpeedFactor()

   .. method:: void setAutoPathSpeedFactor(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. method:: double getAutoTurnStartAltitude()




      :Game Scenes: Flight

   .. method:: double getAutoTurnStartVelocity()




      :Game Scenes: Flight

   .. method:: double getAutoTurnEndAltitude()




      :Game Scenes: Flight

   .. method:: double getTurnStartAltitude()

   .. method:: void setTurnStartAltitude(double value)

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. method:: double getTurnStartVelocity()

   .. method:: void setTurnStartVelocity(double value)

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. method:: double getTurnEndAltitude()

   .. method:: void setTurnEndAltitude(double value)

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. method:: double getTurnEndAngle()

   .. method:: void setTurnEndAngle(double value)

      The final flight path angle.

      :Game Scenes: Flight

   .. method:: double getTurnShapeExponent()

   .. method:: void setTurnShapeExponent(double value)

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. type:: public class AscentGT



   .. method:: double getHoldAPTime()

   .. method:: void setHoldAPTime(double value)



      :Game Scenes: Flight

   .. method:: double getIntermediateAltitude()

   .. method:: void setIntermediateAltitude(double value)



      :Game Scenes: Flight

   .. method:: double getTurnStartAltitude()

   .. method:: void setTurnStartAltitude(double value)



      :Game Scenes: Flight

   .. method:: double getTurnStartPitch()

   .. method:: void setTurnStartPitch(double value)



      :Game Scenes: Flight

   .. method:: double getTurnStartVelocity()

   .. method:: void setTurnStartVelocity(double value)



      :Game Scenes: Flight



AscentPVG
---------


.. type:: public class AscentPVG

   The Primer Vector Guidance (RSS/RO) profile.

   .. method:: double getDesiredApoapsis()

   .. method:: void setDesiredApoapsis(double value)

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. method:: double getPitchStartVelocity()

   .. method:: void setPitchStartVelocity(double value)



      :Game Scenes: Flight

   .. method:: double getPitchRate()

   .. method:: void setPitchRate(double value)



      :Game Scenes: Flight

   .. method:: boolean getOmitCoast()

   .. method:: void setOmitCoast(boolean value)



      :Game Scenes: Flight
