.. default-domain:: java
.. highlight:: java
.. package:: krpc.client.services.MechJeb

AscentAutopilot
===============


.. type:: public class AscentAutopilot

   This module controls the Ascent Guidance in MechJeb 2.

   .. note::

      See `MechJeb2 wiki <https://github.com/MuMech/MechJeb2/wiki/Ascent-Guidance#initial-pitch-over-issues>`_ for more guidance on how to optimally set up this autopilot.

   .. method:: boolean getEnabled()

   .. method:: void setEnabled(boolean value)



      :Game Scenes: Flight

   .. method:: String getStatus()


      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. method:: int getAscentPathIndex()

   .. method:: void setAscentPathIndex(int value)

      The selected ascent path.

      0 = :type:`AscentClassic` (Classic Ascent Profile)

      1 = :type:`AscentGT` (Stock-style GravityTurn)

      2 = :type:`AscentPVG` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. method:: AscentClassic getAscentPathClassic()


      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. method:: AscentGT getAscentPathGT()


      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. method:: AscentPVG getAscentPathPVG()


      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. method:: double getDesiredInclination()

   .. method:: void setDesiredInclination(double value)

      The desired inclination in degrees for the final circular orbit.

      :Game Scenes: Flight

   .. method:: double getDesiredOrbitAltitude()

   .. method:: void setDesiredOrbitAltitude(double value)

      The desired altitude in kilometres for the final circular orbit.

      :Game Scenes: Flight

   .. method:: ThrustController getThrustController()




      :Game Scenes: Flight


      .. note::

         Equivalent to :meth:`getThrustController()`.

   .. method:: boolean getForceRoll()

   .. method:: void setForceRoll(boolean value)

      The state of force roll.

      :Game Scenes: Flight

   .. method:: double getTurnRoll()

   .. method:: void setTurnRoll(double value)

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. method:: double getVerticalRoll()

   .. method:: void setVerticalRoll(double value)

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. method:: boolean getLimitAoA()

   .. method:: void setLimitAoA(boolean value)

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. method:: double getMaxAoA()

   .. method:: void setMaxAoA(double value)

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. method:: double getAoALimitFadeoutPressure()

   .. method:: void setAoALimitFadeoutPressure(double value)

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. method:: boolean getCorrectiveSteering()

   .. method:: void setCorrectiveSteering(boolean value)

      Will cause the craft to steer based on the more accurate velocity vector rather than positional vector (large craft may actually perform better with this box unchecked).

      :Game Scenes: Flight

   .. method:: double getCorrectiveSteeringGain()

   .. method:: void setCorrectiveSteeringGain(double value)

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. method:: boolean getAutostage()

   .. method:: void setAutostage(boolean value)

      The autopilot will automatically stage when the current stage has run out of fuel.
      Paramethers can be set in :type:`StagingController`.

      :Game Scenes: Flight

   .. method:: StagingController getStagingController()




      :Game Scenes: Flight


      .. note::

         Equivalent to :meth:`getStagingController()`.

   .. method:: boolean getAutodeploySolarPanels()

   .. method:: void setAutodeploySolarPanels(boolean value)

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. method:: boolean getAutoDeployAntennas()

   .. method:: void setAutoDeployAntennas(boolean value)

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. method:: boolean getSkipCircularization()

   .. method:: void setSkipCircularization(boolean value)

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. method:: int getWarpCountDown()

   .. method:: void setWarpCountDown(int value)



      :Game Scenes: Flight

   .. method:: double getLaunchLANDifference()

   .. method:: void setLaunchLANDifference(double value)



      :Game Scenes: Flight

   .. method:: double getLaunchPhaseAngle()

   .. method:: void setLaunchPhaseAngle(double value)



      :Game Scenes: Flight

   .. method:: AscentLaunchMode getLaunchMode()


      Current autopilot mode. Useful for determining whether the autopilot is performing a timed launch or not.

      :Game Scenes: Flight

   .. method:: void abortTimedLaunch()

      Abort a known timed launch when it has not started yet

      :Game Scenes: Flight

   .. method:: void launchToRendezvous()

      Launch to rendezvous with the selected target.

      :Game Scenes: Flight

   .. method:: void launchToTargetPlane()

      Launch into the plane of the selected target.

      :Game Scenes: Flight



.. type:: public enum AscentLaunchMode




   .. field:: public AscentLaunchMode NORMAL

      The autopilot is not performing a timed launch.


   .. field:: public AscentLaunchMode RENDEZVOUS

      The autopilot is performing a timed launch to rendezvous with the target vessel.


   .. field:: public AscentLaunchMode TARGET_PLANE

      The autopilot is performing a timed launch to target plane.


   .. field:: public AscentLaunchMode UNKNOWN

      The autopilot is performing an unknown timed launch.



AscentClassic
-------------


.. type:: public class AscentClassic

   The Classic Ascent Profile.

   .. method:: boolean getAutoPath()

   .. method:: void setAutoPath(boolean value)

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. method:: float getAutoTurnPercent()

   .. method:: void setAutoTurnPercent(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. method:: float getAutoTurnSpeedFactor()

   .. method:: void setAutoTurnSpeedFactor(float value)

      A value between 0 and 1.

      :Game Scenes: Flight

   .. method:: double getAutoTurnStartAltitude()




      :Game Scenes: Flight

   .. method:: double getAutoTurnStartVelocity()




      :Game Scenes: Flight

   .. method:: double getAutoTurnEndAltitude()




      :Game Scenes: Flight

   .. method:: double getTurnStartAltitude()

   .. method:: void setTurnStartAltitude(double value)

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. method:: double getTurnStartVelocity()

   .. method:: void setTurnStartVelocity(double value)

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. method:: double getTurnEndAltitude()

   .. method:: void setTurnEndAltitude(double value)

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. method:: double getTurnEndAngle()

   .. method:: void setTurnEndAngle(double value)

      The final flight path angle.

      :Game Scenes: Flight

   .. method:: double getTurnShapeExponent()

   .. method:: void setTurnShapeExponent(double value)

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. type:: public class AscentGT

   This profile is similar to the gravity turn mod. It is a 3-burn to orbit style of launch that can get to orbit with about 2800 dV on stock Kerbin.
   If you want to have fun make a rocket that is basically a nose cone, a jumbo-64 a mainsail and some fairly big fins, have the pitch program flip it over aggressively (uncheck the AoA limiter, set the values to like 0.5 / 50 / 40 / 45 / 1) and let it rip.

   .. note::

      It's not precisely the GT mod algorithm and it does not do any pitch-up during the intermediate burn right now, so it won't handle low TWR upper stages.

   .. method:: double getHoldAPTime()

   .. method:: void setHoldAPTime(double value)

      At the intermediate altitude with this much time-to-apoapsis left the engine will start burning prograde to lift the apoapsis.
      The engine will throttle down in order to burn closer to the apoapsis.
      This is very similar to the lead-time of a maneuver node in concept, but with throttling down in the case where the player has initiated the burn too early (the corollary is that if you see lots of throttling down at the start, you likely need less HoldAP time).

      :Game Scenes: Flight

   .. method:: double getIntermediateAltitude()

   .. method:: void setIntermediateAltitude(double value)

      Intermediate apoapsis altitude to coast to and then raise the apoapsis up to the eventual final target. May be set to equal the final target in order to skip the intermediate phase.

      :Game Scenes: Flight

   .. method:: double getTurnStartAltitude()

   .. method:: void setTurnStartAltitude(double value)

      Altitude in km to pitch over and initiate the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight

   .. method:: double getTurnStartPitch()

   .. method:: void setTurnStartPitch(double value)

      Pitch that the pitch program immediately applies.

      :Game Scenes: Flight

   .. method:: double getTurnStartVelocity()

   .. method:: void setTurnStartVelocity(double value)

      Velocity in m/s which triggers pitch over and initiates the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight



AscentPVG
---------


.. type:: public class AscentPVG

   The Primer Vector Guidance (RSS/RO) profile.

   .. method:: double getDesiredApoapsis()

   .. method:: void setDesiredApoapsis(double value)

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. method:: double getPitchStartVelocity()

   .. method:: void setPitchStartVelocity(double value)



      :Game Scenes: Flight

   .. method:: double getPitchRate()

   .. method:: void setPitchRate(double value)



      :Game Scenes: Flight

   .. method:: boolean getOmitCoast()

   .. method:: void setOmitCoast(boolean value)



      :Game Scenes: Flight
