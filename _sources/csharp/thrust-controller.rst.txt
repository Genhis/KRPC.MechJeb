.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.MechJeb

ThrustController
================


.. class:: ThrustController



   .. property:: bool DifferentialThrottle { get; set; }



      :Game Scenes: Flight

   .. property:: DifferentialThrottleStatus DifferentialThrottleStatus { get; }



      :Game Scenes: Flight

   .. property:: bool ElectricThrottle { get; set; }



      :Game Scenes: Flight

   .. property:: double ElectricThrottleHi { get; set; }



      :Game Scenes: Flight

   .. property:: double ElectricThrottleLo { get; set; }



      :Game Scenes: Flight

   .. property:: double FlameoutSafetyPct { get; set; }

      The jet safety margin. A value between 0 and 1.

      :Game Scenes: Flight

   .. property:: bool LimitAcceleration { get; set; }



      :Game Scenes: Flight

   .. property:: bool LimitDynamicPressure { get; set; }



      :Game Scenes: Flight

   .. property:: bool LimitThrottle { get; set; }



      :Game Scenes: Flight

   .. property:: bool LimitToPreventFlameout { get; set; }



      :Game Scenes: Flight

   .. property:: bool LimitToPreventOverheats { get; set; }

      Limits the throttle to prevent parts from overheating.

      :Game Scenes: Flight

   .. property:: bool LimiterMinThrottle { get; set; }



      :Game Scenes: Flight

   .. property:: bool ManageIntakes { get; set; }



      :Game Scenes: Flight

   .. property:: double MaxAcceleration { get; set; }

      Limit acceleration to [m/s^2] (never exceed the acceleration during ascent).

      :Game Scenes: Flight

   .. property:: double MaxDynamicPressure { get; set; }

      Limit the maximal dynamic pressure in Pa.
      This avoids that pieces break off during launch because of atmospheric pressure.

      :Game Scenes: Flight

   .. property:: double MaxThrottle { get; set; }

      Never exceed the percentage of the throttle during ascent (value between 0 and 1).

      :Game Scenes: Flight

   .. property:: double MinThrottle { get; set; }

      Never go below the percentage of the throttle during ascent (value between 0 and 1).

      :Game Scenes: Flight

   .. property:: bool SmoothThrottle { get; set; }



      :Game Scenes: Flight

   .. property:: double ThrottleSmoothingTime { get; set; }



      :Game Scenes: Flight



.. enum:: DifferentialThrottleStatus




   .. value:: AllEnginesOff




   .. value:: MoreEnginesRequired




   .. value:: SolverFailed




   .. value:: Success
