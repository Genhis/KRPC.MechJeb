.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.MechJeb

AscentAutopilot
===============


.. class:: AscentAutopilot

   This module controls the Ascent Guidance in MechJeb 2.

   .. property:: bool Enabled { get; set; }



      :Game Scenes: Flight

   .. property:: string Status { get; }

      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. property:: int AscentPathIndex { get; set; }

      The selected ascent path.

      0 = :type:`AscentClassic` (Classic Ascent Profile)

      1 = :type:`AscentGT` (Stock-style GravityTurn)

      2 = :type:`AscentPVG` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. property:: AscentClassic AscentPathClassic { get; }

      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. property:: AscentGT AscentPathGT { get; }

      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. property:: AscentPVG AscentPathPVG { get; }

      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. property:: double DesiredInclination { get; set; }

      The desired inclination.

      :Game Scenes: Flight

   .. property:: double DesiredOrbitAltitude { get; set; }

      The desired orbit altitude.

      :Game Scenes: Flight

   .. property:: ThrustController ThrustController { get; }



      :Game Scenes: Flight


      .. note::

         Equivalend to :prop:`MechJeb.ThrustController`.

   .. property:: bool ForceRoll { get; set; }

      The state of force roll.

      :Game Scenes: Flight

   .. property:: double TurnRoll { get; set; }

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. property:: double VerticalRoll { get; set; }

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. property:: bool LimitAoA { get; set; }

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. property:: double MaxAoA { get; set; }

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. property:: double AoALimitFadeoutPressure { get; set; }

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. property:: bool CorrectiveSteering { get; set; }

      The state of corrective steering.

      :Game Scenes: Flight

   .. property:: double CorrectiveSteeringGain { get; set; }

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. property:: bool Autostage { get; set; }

      Whether to enable autostaging. Paramethers can be set in :type:`StagingController`.

      :Game Scenes: Flight

   .. property:: StagingController StagingController { get; }



      :Game Scenes: Flight


      .. note::

         Equivalent to :prop:`MechJeb.StagingController`.

   .. property:: bool AutodeploySolarPanels { get; set; }

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. property:: bool AutoDeployAntennas { get; set; }

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. property:: bool SkipCircularization { get; set; }

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. property:: int WarpCountDown { get; set; }



      :Game Scenes: Flight

   .. property:: double LaunchLANDifference { get; set; }



      :Game Scenes: Flight

   .. property:: double LaunchPhaseAngle { get; set; }



      :Game Scenes: Flight

   .. method:: void LaunchToRendezvous()




      :Game Scenes: Flight

   .. method:: void LaunchToTargetPlane()

      Launch into the plane of the selected target.


      :Game Scenes: Flight



AscentClassic
-------------


.. class:: AscentClassic

   The Classic Ascent Profile.

   .. property:: bool AutoPath { get; set; }

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. property:: float AutoPathPerc { get; set; }

      A value between 0 and 1.

      :Game Scenes: Flight

   .. property:: float AutoPathSpeedFactor { get; set; }

      A value between 0 and 1.

      :Game Scenes: Flight

   .. property:: double AutoTurnStartAltitude { get; }



      :Game Scenes: Flight

   .. property:: double AutoTurnStartVelocity { get; }



      :Game Scenes: Flight

   .. property:: double AutoTurnEndAltitude { get; }



      :Game Scenes: Flight

   .. property:: double TurnStartAltitude { get; set; }

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. property:: double TurnStartVelocity { get; set; }

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. property:: double TurnEndAltitude { get; set; }

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. property:: double TurnEndAngle { get; set; }

      The final flight path angle.

      :Game Scenes: Flight

   .. property:: double TurnShapeExponent { get; set; }

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. class:: AscentGT



   .. property:: double HoldAPTime { get; set; }



      :Game Scenes: Flight

   .. property:: double IntermediateAltitude { get; set; }



      :Game Scenes: Flight

   .. property:: double TurnStartAltitude { get; set; }



      :Game Scenes: Flight

   .. property:: double TurnStartPitch { get; set; }



      :Game Scenes: Flight

   .. property:: double TurnStartVelocity { get; set; }



      :Game Scenes: Flight



AscentPVG
---------


.. class:: AscentPVG

   The Primer Vector Guidance (RSS/RO) profile.

   .. property:: double DesiredApoapsis { get; set; }

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. property:: double PitchStartVelocity { get; set; }



      :Game Scenes: Flight

   .. property:: double PitchRate { get; set; }



      :Game Scenes: Flight

   .. property:: bool OmitCoast { get; set; }



      :Game Scenes: Flight
