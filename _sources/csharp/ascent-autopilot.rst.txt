.. default-domain:: csharp
.. highlight:: csharp
.. namespace:: KRPC.Client.Services.MechJeb

AscentAutopilot
===============


.. class:: AscentAutopilot

   This module controls the Ascent Guidance in MechJeb 2.

   .. note::

      See `MechJeb2 wiki <https://github.com/MuMech/MechJeb2/wiki/Ascent-Guidance#initial-pitch-over-issues>`_ for more guidance on how to optimally set up this autopilot.

   .. property:: bool Enabled { get; set; }



      :Game Scenes: Flight

   .. property:: string Status { get; }

      The autopilot status; it depends on the selected ascent path.

      :Game Scenes: Flight

   .. property:: int AscentPathIndex { get; set; }

      The selected ascent path.

      0 = :type:`AscentClassic` (Classic Ascent Profile)

      1 = :type:`AscentGT` (Stock-style GravityTurn)

      2 = :type:`AscentPVG` (Primer Vector Guidance (RSS/RO))

      :Game Scenes: Flight

   .. property:: AscentClassic AscentPathClassic { get; }

      Get Classic Ascent Profile settings.

      :Game Scenes: Flight

   .. property:: AscentGT AscentPathGT { get; }

      Get Stock-style GravityTurn profile settings.

      :Game Scenes: Flight

   .. property:: AscentPVG AscentPathPVG { get; }

      Get Powered Explicit Guidance (RSS/RO) profile settings.

      :Game Scenes: Flight

   .. property:: double DesiredInclination { get; set; }

      The desired inclination in degrees for the final circular orbit.

      :Game Scenes: Flight

   .. property:: double DesiredOrbitAltitude { get; set; }

      The desired altitude in kilometres for the final circular orbit.

      :Game Scenes: Flight

   .. property:: ThrustController ThrustController { get; }



      :Game Scenes: Flight


      .. note::

         Equivalent to :prop:`MechJeb.ThrustController`.

   .. property:: bool ForceRoll { get; set; }

      The state of force roll.

      :Game Scenes: Flight

   .. property:: double TurnRoll { get; set; }

      The turn roll used by the autopilot.

      :Game Scenes: Flight

   .. property:: double VerticalRoll { get; set; }

      The vertical/climb roll used by the autopilot.

      :Game Scenes: Flight

   .. property:: bool LimitAoA { get; set; }

      Whether to limit angle of attack.

      :Game Scenes: Flight

   .. property:: double MaxAoA { get; set; }

      The maximal angle of attack used by the autopilot.

      :Game Scenes: Flight

   .. property:: double AoALimitFadeoutPressure { get; set; }

      The pressure value when AoA limit is automatically deactivated.

      :Game Scenes: Flight

   .. property:: bool CorrectiveSteering { get; set; }

      Will cause the craft to steer based on the more accurate velocity vector rather than positional vector (large craft may actually perform better with this box unchecked).

      :Game Scenes: Flight

   .. property:: double CorrectiveSteeringGain { get; set; }

      The gain of corrective steering used by the autopilot.

      :Game Scenes: Flight

   .. property:: bool Autostage { get; set; }

      The autopilot will automatically stage when the current stage has run out of fuel.
      Paramethers can be set in :type:`StagingController`.

      :Game Scenes: Flight

   .. property:: StagingController StagingController { get; }



      :Game Scenes: Flight


      .. note::

         Equivalent to :prop:`MechJeb.StagingController`.

   .. property:: bool AutodeploySolarPanels { get; set; }

      Whether to deploy solar panels automatically when the ascent finishes.

      :Game Scenes: Flight

   .. property:: bool AutoDeployAntennas { get; set; }

      Whether to deploy antennas automatically when the ascent finishes.

      :Game Scenes: Flight

   .. property:: bool SkipCircularization { get; set; }

      Whether to skip circularization burn and do only the ascent.

      :Game Scenes: Flight

   .. property:: int WarpCountDown { get; set; }



      :Game Scenes: Flight

   .. property:: double LaunchLANDifference { get; set; }



      :Game Scenes: Flight

   .. property:: double LaunchPhaseAngle { get; set; }



      :Game Scenes: Flight

   .. property:: AscentLaunchMode LaunchMode { get; }

      Current autopilot mode. Useful for determining whether the autopilot is performing a timed launch or not.

      :Game Scenes: Flight

   .. method:: void AbortTimedLaunch()

      Abort a known timed launch when it has not started yet


      :Game Scenes: Flight

   .. method:: void LaunchToRendezvous()

      Launch to rendezvous with the selected target.


      :Game Scenes: Flight

   .. method:: void LaunchToTargetPlane()

      Launch into the plane of the selected target.


      :Game Scenes: Flight



.. enum:: AscentLaunchMode




   .. value:: Normal

      The autopilot is not performing a timed launch.


   .. value:: Rendezvous

      The autopilot is performing a timed launch to rendezvous with the target vessel.


   .. value:: TargetPlane

      The autopilot is performing a timed launch to target plane.


   .. value:: Unknown

      The autopilot is performing an unknown timed launch.



AscentClassic
-------------


.. class:: AscentClassic

   The Classic Ascent Profile.

   .. property:: bool AutoPath { get; set; }

      Whether to enable automatic altitude turn.

      :Game Scenes: Flight

   .. property:: float AutoTurnPercent { get; set; }

      A value between 0 and 1.

      :Game Scenes: Flight

   .. property:: float AutoTurnSpeedFactor { get; set; }

      A value between 0 and 1.

      :Game Scenes: Flight

   .. property:: double AutoTurnStartAltitude { get; }



      :Game Scenes: Flight

   .. property:: double AutoTurnStartVelocity { get; }



      :Game Scenes: Flight

   .. property:: double AutoTurnEndAltitude { get; }



      :Game Scenes: Flight

   .. property:: double TurnStartAltitude { get; set; }

      The turn starts when this altitude is reached.

      :Game Scenes: Flight

   .. property:: double TurnStartVelocity { get; set; }

      The turn starts when this velocity is reached.

      :Game Scenes: Flight

   .. property:: double TurnEndAltitude { get; set; }

      The turn ends when this altitude is reached.

      :Game Scenes: Flight

   .. property:: double TurnEndAngle { get; set; }

      The final flight path angle.

      :Game Scenes: Flight

   .. property:: double TurnShapeExponent { get; set; }

      A value between 0 - 1 describing how steep the turn is.

      :Game Scenes: Flight



AscentGT
--------


.. class:: AscentGT

   This profile is similar to the gravity turn mod. It is a 3-burn to orbit style of launch that can get to orbit with about 2800 dV on stock Kerbin.
   If you want to have fun make a rocket that is basically a nose cone, a jumbo-64 a mainsail and some fairly big fins, have the pitch program flip it over aggressively (uncheck the AoA limiter, set the values to like 0.5 / 50 / 40 / 45 / 1) and let it rip.

   .. note::

      It's not precisely the GT mod algorithm and it does not do any pitch-up during the intermediate burn right now, so it won't handle low TWR upper stages.

   .. property:: double HoldAPTime { get; set; }

      At the intermediate altitude with this much time-to-apoapsis left the engine will start burning prograde to lift the apoapsis.
      The engine will throttle down in order to burn closer to the apoapsis.
      This is very similar to the lead-time of a maneuver node in concept, but with throttling down in the case where the player has initiated the burn too early (the corollary is that if you see lots of throttling down at the start, you likely need less HoldAP time).

      :Game Scenes: Flight

   .. property:: double IntermediateAltitude { get; set; }

      Intermediate apoapsis altitude to coast to and then raise the apoapsis up to the eventual final target. May be set to equal the final target in order to skip the intermediate phase.

      :Game Scenes: Flight

   .. property:: double TurnStartAltitude { get; set; }

      Altitude in km to pitch over and initiate the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight

   .. property:: double TurnStartPitch { get; set; }

      Pitch that the pitch program immediately applies.

      :Game Scenes: Flight

   .. property:: double TurnStartVelocity { get; set; }

      Velocity in m/s which triggers pitch over and initiates the Gravity Turn (higher values for lower-TWR rockets).

      :Game Scenes: Flight



AscentPVG
---------


.. class:: AscentPVG

   The Primer Vector Guidance (RSS/RO) profile.

   .. property:: bool AttachAltFlag { get; set; }



      :Game Scenes: Flight

   .. property:: double DesiredApoapsis { get; set; }

      The target apoapsis in meters.

      :Game Scenes: Flight

   .. property:: double DesiredAttachAlt { get; set; }



      :Game Scenes: Flight

   .. property:: double DynamicPressureTrigger { get; set; }



      :Game Scenes: Flight

   .. property:: bool FixedCoast { get; set; }



      :Game Scenes: Flight

   .. property:: double FixedCoastLength { get; set; }



      :Game Scenes: Flight

   .. property:: double PitchRate { get; set; }



      :Game Scenes: Flight

   .. property:: double PitchStartVelocity { get; set; }



      :Game Scenes: Flight

   .. property:: int StagingTrigger { get; set; }



      :Game Scenes: Flight

   .. property:: bool StagingTriggerFlag { get; set; }



      :Game Scenes: Flight
